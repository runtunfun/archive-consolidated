#!/bin/bash
# PERMANENTES SCRIPT - wird ins Git eingecheckt
# scripts/build/build.sh
# Erstellt Production-Build der Dokumentation

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

echo "🏗️ Building homelab documentation for production..."
echo "📁 Project root: $PROJECT_ROOT"
echo ""

# Prüfe ob Virtual Environment existiert
if [[ ! -d "$PROJECT_ROOT/venv" ]]; then
    echo "❌ Python virtual environment not found!"
    echo "Run: ./scripts/setup/setup-environment.sh"
    exit 1
fi

# Aktiviere Virtual Environment
echo "🔌 Activating virtual environment..."
source "$PROJECT_ROOT/venv/bin/activate"

# Konfiguration aus Environment oder Default
CONFIG_PATH="${HOMELAB_CONFIG_PATH:-$PROJECT_ROOT/config-local}"
ENVIRONMENT="${HOMELAB_ENV:-production}"
CLEAN_BUILD="${HOMELAB_CLEAN:-true}"

echo "📁 Config path: $CONFIG_PATH"
echo "🔧 Environment: $ENVIRONMENT"
echo "🧹 Clean build: $CLEAN_BUILD"

# Prüfe ob Konfiguration existiert
if [[ ! -d "$CONFIG_PATH" ]]; then
    echo "❌ Configuration directory not found: $CONFIG_PATH"
    echo ""
    echo "Available configurations:"
    for config_dir in config-*; do
        if [[ -d "$config_dir" ]]; then
            echo "  - $config_dir"
        fi
    done
    echo ""
    echo "Solutions:"
    echo "1. Create local config: cp -r config-example config-local"
    echo "2. Set custom path: HOMELAB_CONFIG_PATH=/path/to/config ./scripts/build/build.sh"
    echo "3. Use example config: HOMELAB_CONFIG_PATH=./config-example ./scripts/build/build.sh"
    exit 1
fi

# Prüfe ob Generator existiert
if [[ ! -f "$PROJECT_ROOT/scripts/generator/generate-docs.py" ]]; then
    echo "❌ Documentation generator not found!"
    echo "File missing: scripts/generator/generate-docs.py"
    exit 1
fi

echo ""
echo "🔍 Validating configuration..."
if python "$PROJECT_ROOT/scripts/generator/generate-docs.py" \
    --config "$CONFIG_PATH" \
    --env "$ENVIRONMENT" \
    --validate-only; then
    echo "✅ Configuration validation passed"
else
    echo "❌ Configuration validation failed!"
    echo ""
    echo "Please check your configuration files in: $CONFIG_PATH"
    exit 1
fi

echo ""
echo "📝 Generating documentation..."
if python "$PROJECT_ROOT/scripts/generator/generate-docs.py" \
    --config "$CONFIG_PATH" \
    --env "$ENVIRONMENT"; then
    echo "✅ Documentation generated successfully"
else
    echo "❌ Documentation generation failed!"
    exit 1
fi

# Prüfe ob MkDocs konfiguriert ist
if [[ ! -f "$PROJECT_ROOT/mkdocs.yml" ]]; then
    echo "❌ MkDocs configuration not found!"
    echo "Expected: mkdocs.yml (should be generated by documentation generator)"
    exit 1
fi

# Clean Build falls gewünscht
if [[ "$CLEAN_BUILD" == "true" ]]; then
    echo ""
    echo "🧹 Cleaning previous builds..."
    rm -rf "$PROJECT_ROOT/site"
    echo "✅ Previous builds cleaned"
fi

echo ""
echo "🏗️ Building static website..."
cd "$PROJECT_ROOT"

# Erstelle Build mit detailliertem Output
if mkdocs build --clean --strict; then
    echo "✅ Website built successfully"
else
    echo "❌ Website build failed!"
    exit 1
fi

# Build-Informationen sammeln
echo ""
echo "📊 Build Statistics"
echo "=================="

SITE_DIR="$PROJECT_ROOT/site"
if [[ -d "$SITE_DIR" ]]; then
    # Dateigröße berechnen
    total_size=$(du -sh "$SITE_DIR" | cut -f1)
    file_count=$(find "$SITE_DIR" -type f | wc -l)
    html_count=$(find "$SITE_DIR" -name "*.html" | wc -l)
    
    echo "📁 Output directory: site/"
    echo "📏 Total size: $total_size"
    echo "📄 Total files: $file_count"
    echo "🌐 HTML pages: $html_count"
    
    # Zeige wichtige Dateien
    echo ""
    echo "📋 Key files generated:"
    for file in index.html search/search_index.json sitemap.xml; do
        if [[ -f "$SITE_DIR/$file" ]]; then
            size=$(du -h "$SITE_DIR/$file" | cut -f1)
            echo "  ✅ $file ($size)"
        else
            echo "  ❌ $file (missing)"
        fi
    done
fi

# Git-Informationen hinzufügen (falls verfügbar)
if git rev-parse --git-dir > /dev/null 2>&1; then
    echo ""
    echo "📝 Build Information"
    echo "==================="
    echo "🏷️  Git commit: $(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')"
    echo "🌿 Git branch: $(git branch --show-current 2>/dev/null || echo 'unknown')"
    echo "⏰ Build time: $(date)"
    echo "👤 Built by: $(whoami)"
    echo "🖥️  Built on: $(hostname)"
fi

# Zeige nächste Schritte
echo ""
echo "✅ Production build completed successfully!"
echo ""
echo "📁 Output location: $PROJECT_ROOT/site/"
echo ""
echo "🚀 Next steps:"
echo ""
echo "1. 👀 Preview the build locally:"
echo "   python -m http.server -d site 8080"
echo "   # Open http://localhost:8080"
echo ""
echo "2. 🌐 Deploy to web server:"
echo "   rsync -av site/ user@server:/var/www/html/"
echo ""
echo "3. 📤 Deploy to GitHub Pages:"
echo "   ./scripts/build/deploy.sh github"
echo ""
echo "4. 📦 Create deployment archive:"
echo "   tar -czf homelab-docs-$(date +%Y%m%d).tar.gz -C site ."
echo ""
echo "💡 Configuration used:"
echo "  - Config path: $CONFIG_PATH"
echo "  - Environment: $ENVIRONMENT"
echo "  - Templates: templates/"
echo ""
echo "🔧 To build with different settings:"
echo "  HOMELAB_ENV=test ./scripts/build/build.sh"
echo "  HOMELAB_CONFIG_PATH=./config-prod ./scripts/build/build.sh"
echo "  HOMELAB_CLEAN=false ./scripts/build/build.sh"