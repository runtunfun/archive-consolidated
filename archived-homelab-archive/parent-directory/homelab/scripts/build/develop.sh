#!/bin/bash
# PERMANENTES SCRIPT - wird ins Git eingecheckt
# scripts/build/develop.sh
# Startet den Development-Server mit Live-Reload

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

echo "üöÄ Starting homelab development environment..."
echo "üìÅ Project root: $PROJECT_ROOT"
echo ""

# Pr√ºfe ob Virtual Environment existiert
if [[ ! -d "$PROJECT_ROOT/venv" ]]; then
    echo "‚ùå Python virtual environment not found!"
    echo "Run: ./scripts/setup/setup-environment.sh"
    exit 1
fi

# Aktiviere Virtual Environment
echo "üîå Activating virtual environment..."
source "$PROJECT_ROOT/venv/bin/activate"

# Konfiguration aus Environment oder Default
CONFIG_PATH="${HOMELAB_CONFIG_PATH:-$PROJECT_ROOT/config-local}"
ENVIRONMENT="${HOMELAB_ENV:-development}"

echo "üìÅ Using config from: $CONFIG_PATH"
echo "üîß Environment: $ENVIRONMENT"

# Pr√ºfe ob Konfiguration existiert
if [[ ! -d "$CONFIG_PATH" ]]; then
    echo "‚ùå Configuration directory not found: $CONFIG_PATH"
    echo ""
    echo "Solutions:"
    echo "1. Create local config: cp -r config-example config-local"
    echo "2. Set custom path: HOMELAB_CONFIG_PATH=/path/to/config ./scripts/build/develop.sh"
    echo "3. Use example config: HOMELAB_CONFIG_PATH=./config-example ./scripts/build/develop.sh"
    exit 1
fi

# Pr√ºfe ob Generator existiert
if [[ ! -f "$PROJECT_ROOT/scripts/generator/generate-docs.py" ]]; then
    echo "‚ùå Documentation generator not found!"
    echo "File missing: scripts/generator/generate-docs.py"
    exit 1
fi

echo ""
echo "üîç Validating configuration..."
if python "$PROJECT_ROOT/scripts/generator/generate-docs.py" \
    --config "$CONFIG_PATH" \
    --env "$ENVIRONMENT" \
    --validate-only; then
    echo "‚úÖ Configuration validation passed"
else
    echo "‚ùå Configuration validation failed!"
    echo ""
    echo "Common issues:"
    echo "  - Missing required fields in YAML files"
    echo "  - Invalid YAML syntax"
    echo "  - Missing configuration files"
    echo ""
    echo "üí° Check your configuration files in: $CONFIG_PATH"
    exit 1
fi

echo ""
echo "üèóÔ∏è Generating documentation..."
if python "$PROJECT_ROOT/scripts/generator/generate-docs.py" \
    --config "$CONFIG_PATH" \
    --env "$ENVIRONMENT"; then
    echo "‚úÖ Documentation generated successfully"
else
    echo "‚ùå Documentation generation failed!"
    exit 1
fi

# Pr√ºfe ob MkDocs konfiguriert ist
if [[ ! -f "$PROJECT_ROOT/mkdocs.yml" ]]; then
    echo "‚ùå MkDocs configuration not found!"
    echo "Expected: mkdocs.yml (should be generated by documentation generator)"
    exit 1
fi

echo ""
echo "üåê Starting MkDocs development server..."
echo ""
echo "üì± Your documentation will be available at:"
echo "   üîó http://127.0.0.1:8000"
echo ""
echo "‚ö° Features enabled:"
echo "   - Live reload on file changes"
echo "   - Real-time template updates"
echo "   - Configuration hot-reloading"
echo ""
echo "üí° Tips:"
echo "   - Edit files in templates/ to update documentation"
echo "   - Modify config-local/*.yml to change data"
echo "   - Press Ctrl+C to stop the server"
echo ""

# Wechsle ins Projektverzeichnis und starte Server
cd "$PROJECT_ROOT"

# Cleanup function f√ºr graceful shutdown
cleanup() {
    echo ""
    echo "üõë Shutting down development server..."
    echo "üëã Thanks for using homelab documentation!"
}

trap cleanup EXIT

# Starte MkDocs Development Server
# --dev-addr: Bind auf alle Interfaces f√ºr Docker/WSL
# --livereload: Auto-reload bei √Ñnderungen
# --watch: Zus√§tzliche Verzeichnisse √ºberwachen
mkdocs serve \
    --dev-addr 127.0.0.1:8000 \
    --livereload \
    --watch config-local \
    --watch templates